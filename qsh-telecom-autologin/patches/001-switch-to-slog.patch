diff --git a/main.go b/main.go
index 97341c5..42db6a8 100644
--- a/main.go
+++ b/main.go
@@ -6,7 +6,7 @@ import (
 	"encoding/json"
 	"flag"
 	"io"
-	"log"
+	"log/slog"
 	"math/big"
 	"net"
 	"net/http"
@@ -29,6 +29,8 @@ var baseHeader = map[string]string{
 	"User-Agent":      "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0",
 }
 
+var logger = slog.New(slog.NewTextHandler(os.Stdout, nil))
+
 type loginClient struct {
 	c           http.Client
 	localIP     string
@@ -47,7 +49,7 @@ type loginClient struct {
 func (c *loginClient) Get(urlString string) *http.Response {
 	req, err := http.NewRequest("GET", urlString, nil)
 	if err != nil {
-		log.Panic("Cannot make request: ", err)
+		logger.Error("Cannot make request", "error", err)
 	}
 
 	return c.Do(req)
@@ -56,7 +58,8 @@ func (c *loginClient) Get(urlString string) *http.Response {
 func (c *loginClient) Post(urlString string, body io.Reader) *http.Response {
 	req, err := http.NewRequest("POST", urlString, body)
 	if err != nil {
-		log.Panic("Cannot make request: ", err)
+		logger.Error("Cannot make request", "error", err)
+		os.Exit(1)
 	}
 
 	return c.Do(req)
@@ -68,7 +71,8 @@ func (c *loginClient) Do(req *http.Request) *http.Response {
 	if c.localIP != "" {
 		localIP := net.ParseIP(c.localIP)
 		if localIP == nil {
-			log.Fatalf("Invalid local IP: %s", c.localIP)
+			logger.Error("Invalid local IP", "localIP", c.localIP)
+			os.Exit(1)
 		}
 
 		dialContext = func(ctx context.Context, network, addr string) (net.Conn, error) {
@@ -105,7 +109,8 @@ func (c *loginClient) Do(req *http.Request) *http.Response {
 
 	resp, err := c.c.Do(req)
 	if err != nil {
-		log.Panic("Cannot connect: ", err)
+		logger.Error("Cannot connect", "error", err)
+		os.Exit(1)
 	}
 
 	return resp
@@ -123,9 +128,11 @@ func (c *loginClient) PasswordEncrypt() {
 	} else if c.passwordEnc != "" {
 		return
 	} else if c.password == "" {
-		log.Panic("Cannot encrypt password: password not given")
+		logger.Error("Cannot encrypt password: password not given")
+		os.Exit(1)
 	} else {
-		log.Panic("Cannot encrypt password: not enough arguments")
+		logger.Error("Cannot encrypt password: not enough arguments")
+		os.Exit(1)
 	}
 }
 
@@ -149,7 +156,8 @@ func (c *loginClient) loginInit() {
 		} else {
 			u, err := url.Parse(urlString)
 			if err != nil {
-				log.Panic("Returned illegal url '", urlString, "': ", err)
+				logger.Error("Returned illegal url", "url", urlString, "error", err)
+				os.Exit(1)
 			}
 			c.loginHost = u.Host
 			c.queryString = u.RawQuery
@@ -172,7 +180,7 @@ func (c *loginClient) getEncryptKey() {
 	c.exponent = respData.PublicKeyExponent
 	if c.modulus != respData.PublicKeyModulus {
 		if c.modulus != "" {
-			log.Print("Encryption modulus is changed")
+			logger.Info("Encryption modulus is changed")
 		}
 		c.modulus = respData.PublicKeyModulus
 	}
@@ -199,9 +207,10 @@ func (c *loginClient) login() {
 	c.myPost(urlString, reqData, &respData)
 	if respData.Result == "success" {
 		c.userIndex = respData.UserIndex
-		log.Print("Successfully logged in with account '", c.username, "'")
+		logger.Info("Successfully logged in", "account", c.username)
 	} else {
-		log.Panic("Login attempt failed with account '", c.username, "'")
+		logger.Error("Login attempt failed", "account", c.username)
+		os.Exit(1)
 	}
 }
 
@@ -216,9 +225,10 @@ func (c *loginClient) logout() {
 	respData := respStruct{}
 	c.myPost(urlString, reqData, &respData)
 	if respData.Result == "success" {
-		log.Print("Successfully logged out")
+		logger.Info("Successfully logged out")
 	} else {
-		log.Panic("Logout attempt failed, maybe user index has expired")
+		logger.Error("Logout attempt failed, maybe user index has expired")
+		os.Exit(1)
 	}
 }
 
@@ -242,7 +252,8 @@ func (c *loginClient) loadCache() {
 	fileCache := cache{}
 	err = json.Unmarshal([]byte(file), &fileCache)
 	if err != nil {
-		log.Panic("Cannot parse cache file: ", err)
+		logger.Error("Cannot parse cache file", "error", err)
+		os.Exit(1)
 	}
 	if c.username == "" {
 		c.username = fileCache.Username
@@ -272,7 +283,8 @@ func (c *loginClient) saveCache() {
 	path, _ := filepath.Abs(c.cachePath)
 	err := os.WriteFile(path, file, 0666)
 	if err != nil {
-		log.Panic("Failed to write to cache file: ", err)
+		logger.Error("Failed to write to cache file", "error", err)
+		os.Exit(1)
 	}
 }
 
@@ -288,7 +300,8 @@ func (c *loginClient) run() {
 
 	if !*logout {
 		if (c.cachePath == "") && (c.username == "" || c.password == "") {
-			log.Panic("Not enough argument for login. See --help for explanation")
+			logger.Error("Not enough argument for login. See --help for explanation")
+			os.Exit(1)
 		}
 		c.loadCache()
 		c.loginInit()
@@ -297,7 +310,8 @@ func (c *loginClient) run() {
 		c.saveCache()
 	} else {
 		if (c.cachePath == "") && (c.userIndex == "") {
-			log.Panic("Not enough argument for logout. See --help for explanation")
+			logger.Error("Not enough argument for logout. See --help for explanation")
+			os.Exit(1)
 		}
 		c.loadCache()
 		c.logout()
