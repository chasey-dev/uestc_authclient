diff --git a/go.mod b/go.mod
index 0375911..8b7775f 100644
--- a/go.mod
+++ b/go.mod
@@ -1,3 +1,7 @@
 module github.com/aleksanaa/qsh-telecom-autologin
 
 go 1.19
+
+require github.com/sirupsen/logrus v1.9.0
+
+require golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8 // indirect
diff --git a/go.sum b/go.sum
new file mode 100644
index 0000000..ed65537
--- /dev/null
+++ b/go.sum
@@ -0,0 +1,15 @@
+github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
+github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
+github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/sirupsen/logrus v1.9.0 h1:trlNQbNUG3OdDrDil03MCb1H2o9nJ1x4/5LYw7byDE0=
+github.com/sirupsen/logrus v1.9.0/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
+github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=
+github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8 h1:0A+M6Uqn+Eje4kHMK80dtF3JCXC4ykBgQG4Fe06QRhQ=
+golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=
+gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
diff --git a/main.go b/main.go
index 97341c5..cb537b9 100644
--- a/main.go
+++ b/main.go
@@ -6,7 +6,6 @@ import (
 	"encoding/json"
 	"flag"
 	"io"
-	"log"
 	"math/big"
 	"net"
 	"net/http"
@@ -15,6 +14,8 @@ import (
 	"path/filepath"
 	"strings"
 	"time"
+
+	log "github.com/sirupsen/logrus"
 )
 
 // So what's this and why is it there?
@@ -136,8 +137,11 @@ func (c *loginClient) myPost(urlString string, reqData map[string]string, respDa
 	}
 	body := strings.NewReader(formData.Encode())
 	resp := c.Post(urlString, body)
-	_ = json.NewDecoder(resp.Body).Decode(respData)
 	defer resp.Body.Close()
+	err := json.NewDecoder(resp.Body).Decode(respData)
+	if err != nil {
+		log.Panic("Failed to decode response: ", err)
+	}
 }
 
 func (c *loginClient) loginInit() {
@@ -172,7 +176,7 @@ func (c *loginClient) getEncryptKey() {
 	c.exponent = respData.PublicKeyExponent
 	if c.modulus != respData.PublicKeyModulus {
 		if c.modulus != "" {
-			log.Print("Encryption modulus is changed")
+			log.Info("Encryption modulus is changed")
 		}
 		c.modulus = respData.PublicKeyModulus
 	}
@@ -199,9 +203,9 @@ func (c *loginClient) login() {
 	c.myPost(urlString, reqData, &respData)
 	if respData.Result == "success" {
 		c.userIndex = respData.UserIndex
-		log.Print("Successfully logged in with account '", c.username, "'")
+		log.Infof("Successfully logged in with account '%s'", c.username)
 	} else {
-		log.Panic("Login attempt failed with account '", c.username, "'")
+		log.Panicf("Login attempt failed with account '%s'", c.username)
 	}
 }
 
@@ -216,7 +220,7 @@ func (c *loginClient) logout() {
 	respData := respStruct{}
 	c.myPost(urlString, reqData, &respData)
 	if respData.Result == "success" {
-		log.Print("Successfully logged out")
+		log.Info("Successfully logged out")
 	} else {
 		log.Panic("Logout attempt failed, maybe user index has expired")
 	}
@@ -240,7 +244,7 @@ func (c *loginClient) loadCache() {
 		return
 	}
 	fileCache := cache{}
-	err = json.Unmarshal([]byte(file), &fileCache)
+	err = json.Unmarshal(file, &fileCache)
 	if err != nil {
 		log.Panic("Cannot parse cache file: ", err)
 	}
@@ -296,7 +300,7 @@ func (c *loginClient) run() {
 		c.login()
 		c.saveCache()
 	} else {
-		if (c.cachePath == "") && (c.userIndex == "") {
+		if (c.cachePath == "" && c.userIndex == "") {
 			log.Panic("Not enough argument for logout. See --help for explanation")
 		}
 		c.loadCache()
@@ -304,6 +308,15 @@ func (c *loginClient) run() {
 	}
 }
 
+func init() {
+	// Set logrus format
+	log.SetFormatter(&log.TextFormatter{
+		FullTimestamp: true,
+	})
+	// Set log level
+	log.SetLevel(log.InfoLevel)
+}
+
 func main() {
 	defer os.Exit(1)
 	client := &loginClient{}
