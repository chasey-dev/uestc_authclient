diff --git a/portal/portal.go b/portal/portal.go
index 20a201e..112ac58 100644
--- a/portal/portal.go
+++ b/portal/portal.go
@@ -141,7 +141,7 @@ func (p *Portal) GetChallenge() (string, error) {
 		return "", err
 	}
 	logrus.Debugln("GET", u)
-	data, err := requestDataWith(u, "GET", PortalHeaderUA)
+	data, err := requestDataWith(p.cip, u, "GET", PortalHeaderUA)
 	if err != nil {
 		return "", err
 	}
@@ -197,7 +197,7 @@ func (p *Portal) Login(challenge string) error {
 		return err
 	}
 	logrus.Debugln("GET", u)
-	data, err := requestDataWith(u, "GET", PortalHeaderUA)
+	data, err := requestDataWith(p.cip, u, "GET", PortalHeaderUA)
 	if err != nil {
 		return err
 	}
diff --git a/portal/web.go b/portal/web.go
index 5aa185a..a37a913 100644
--- a/portal/web.go
+++ b/portal/web.go
@@ -4,18 +4,93 @@ import (
 	"errors"
 	"fmt"
 	"io"
+	"net"
 	"net/http"
+	"syscall"
+	"time"
+
+	"github.com/sirupsen/logrus"
 )
 
-var client = &http.Client{}
+// findInterfaceByIP find interface by given IP address
+func findInterfaceByIP(ip net.IP) (*net.Interface, error) {
+	logrus.Debugln("request ip: ", ip)
+	ifaces, err := net.Interfaces()
+	if err != nil {
+		s := fmt.Sprintf("get interface list failed: %v", err)
+		return nil, errors.New(s)
+	}
+	for _, iface := range ifaces {
+		addrs, err := iface.Addrs()
+		if err != nil {
+			continue
+		}
+		for _, addr := range addrs {
+			var ipNet *net.IPNet
+			var addrIP net.IP
+			switch v := addr.(type) {
+			case *net.IPNet:
+				ipNet = v
+				addrIP = v.IP
+			case *net.IPAddr:
+				ipNet = &net.IPNet{IP: v.IP, Mask: v.IP.DefaultMask()}
+				addrIP = v.IP
+			}
+			if ipNet != nil && addrIP.Equal(ip) {
+				logrus.Debugln("ip bound to iface", iface)
+				return &iface, nil
+			}
+		}
+	}
+	s := fmt.Sprintf("IP %s doesnt belong to any interface", ip.String())
+	return nil, errors.New(s)
+}
+
+// dialerWithInterface returns a net.Dialer，
+// which binds socket to specified interface when establishing connection
+// linux only
+func dialerWithInterface(iface string) *net.Dialer {
+	return &net.Dialer{
+		Timeout:   30 * time.Second,
+		KeepAlive: 30 * time.Second,
+		Control: func(_, _ string, c syscall.RawConn) error {
+			var controlErr error
+			// set SO_BINDTODEVICE for Control to bind to specified interface,
+			// after socket is initialized
+			err := c.Control(func(fd uintptr) {
+				controlErr = syscall.SetsockoptString(int(fd), syscall.SOL_SOCKET, syscall.SO_BINDTODEVICE, iface)
+			})
+			if err != nil {
+				return err
+			}
+			return controlErr
+		},
+	}
+}
+
+// requestDataWith request data with customized http header
+func requestDataWith(ip net.IP, url, method, ua string) (data []byte, err error) {
+	// get the actual iface first
+	iface, err := findInterfaceByIP(ip)
+	if err != nil {
+		return nil, err
+	}
+	// get the dialer with bound iface
+	dialer := dialerWithInterface(iface.Name)
+
+	// specify DialContext with given dialer
+	client := &http.Client{
+		Transport: &http.Transport{
+			DialContext:         dialer.DialContext,
+			TLSHandshakeTimeout: 10 * time.Second,
+		},
+	}
 
-// requestDataWith 使用自定义请求头获取数据
-func requestDataWith(url, method, ua string) (data []byte, err error) {
-	// 提交请求
+	// send req
 	var request *http.Request
 	request, err = http.NewRequest(method, url, nil)
 	if err == nil {
-		// 增加header选项
+		// add User-Agent to http header
 		if ua != "" {
 			request.Header.Add("User-Agent", ua)
 		}
