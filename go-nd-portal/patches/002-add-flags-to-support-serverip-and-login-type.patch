diff --git a/cmd/main.go b/cmd/main.go
index 892a7b0..24d498e 100644
--- a/cmd/main.go
+++ b/cmd/main.go
@@ -49,7 +49,8 @@ func Main() {
 	h := flag.Bool("h", false, "display this help")
 	w := flag.Bool("w", false, "only display warn-or-higher-level log")
 	d := flag.Bool("d", false, "display debug-level log")
-	x := flag.Bool("x", false, "do dx login")
+	s := flag.String("s", "10.253.0.237", "login host")
+	t := flag.String("t", "qsh-edu", "login type [qsh-edu | qsh-dx | qshd-dx | qshd-cmcc]")
 	flag.Parse()
 	if *h {
 		fmt.Println("Usage:")
@@ -96,27 +97,60 @@ func Main() {
 		*p = helper.BytesToString(data)
 		fmt.Println()
 	}
+
+	// construct Portal, no need to do invasive modification
+	// n : username 
+	// p: password 
+	// ip : public ip
 	ptl, err := portal.NewPortal(*n, *p, ip)
 	if err != nil {
 		logrus.Errorln(err)
 		os.Exit(line())
 	}
-	u := portal.PortalGetChallenge
-	if *x {
-		u = portal.PortalGetChallengeDX
+	if *s != portal.PortalServerIP {
+		// just valid IP here, 
+		// dont convert to net.IP because we need only its string later
+		_, err := netip.ParseAddr(*s)
+		if err != nil {
+			logrus.Errorln(err)
+			os.Exit(line())
+		}
+	}
+	// define ac_id
+	var ac_id string
+	switch *t {
+		case "qsh-edu":
+			// qsh-edu is assumed that cant login from dorm
+			*t = portal.PortalDomain
+			ac_id = portal.AC_ID
+		case "qsh-dx":
+			*t = portal.PortalDomainDX
+			ac_id = portal.AC_ID
+		case "qshd-dx":
+			*t = portal.PortalDomainDX
+			ac_id = portal.AC_ID_DORM
+		case "qshd-cmcc":
+			*t = portal.PortalDomainCMCC
+			ac_id = portal.AC_ID_DORM
+		default:
+			logrus.Errorln("Illegal login type:", *t)
+			os.Exit(line())
 	}
-	challenge, err := ptl.GetChallenge(u)
+	logrus.Debugln(fmt.Sprintf("server addr: %s, portal domain: %s, ac_id: %s", *s, *t, ac_id))
+	// input:
+	// server IP
+	// PortalDomain, determined by flag
+	challenge, err := ptl.GetChallenge(*s, *t)
 	if err != nil {
 		logrus.Errorln(err)
 		os.Exit(line())
 	}
-	u = portal.PortalLogin
-	dm := portal.PortalDomain
-	if *x {
-		u = portal.PortalLoginDX
-		dm = portal.PortalDomainDX
-	}
-	err = ptl.Login(u, dm, challenge)
+	// input: 
+	// server IP
+	// PortalDomain, determined by flag
+	// ac_id, determined by flag
+	// challenge
+	err = ptl.Login(*s, *t, ac_id, challenge)
 	if err != nil {
 		logrus.Errorln(err)
 		os.Exit(line())
diff --git a/portal/portal.go b/portal/portal.go
index 906f058..27a4dc3 100644
--- a/portal/portal.go
+++ b/portal/portal.go
@@ -44,8 +44,14 @@ func NewPortal(name, password string, ipv4 net.IP) (*Portal, error) {
 	}, nil
 }
 
-func (p *Portal) GetChallenge(u string) (string, error) {
-	u = fmt.Sprintf(u, "gondportal", url.QueryEscape(p.nam), p.ip, time.Now().UnixMilli())
+// input:
+// server IP
+// PortalDomain, determined by flag
+func (p *Portal) GetChallenge(sIP, domain string) (string, error) {
+	// 1.PortalServerIP 2. callback 3.username 4.PortalDomain 
+	// 5.client IP 6.timestamp
+	u := GetChallengeURL(sIP, "gondportal", url.QueryEscape(p.nam), domain, p.ip, time.Now().UnixMilli())
+	// u = fmt.Sprintf(u, "gondportal", url.QueryEscape(p.nam), p.ip, time.Now().UnixMilli())
 	logrus.Debugln("GET", u)
 	data, err := requestDataWith(u, "GET", PortalHeaderUA)
 	if err != nil {
@@ -73,11 +79,26 @@ func (p *Portal) PasswordHMd5(challenge string) string {
 	_, _ = h.Write(helper.StringToBytes(p.pwd))
 	return hex.EncodeToString(h.Sum(buf[:0]))
 }
-
-func (p *Portal) Login(u, domain, challenge string) error {
-	info := EncodeUserInfo(p.String(), challenge)
+// input: 
+// server IP
+// PortalDomain, determined by login type
+// ac_id, determined by login type
+// challenge
+func (p *Portal) Login(sIP, domain, ac_id, challenge string) error {
+	// 1. username 2.PortalDomain 3. client IP 4. ac_id
+	userInfo := GetPortalUserInfo(p.nam, domain, p.pwd, p.ip, ac_id)
+	info := EncodeUserInfo(userInfo, challenge)
+	// info := EncodeUserInfo(p.String(), challenge)
 	hmd5 := p.PasswordHMd5(challenge)
-	u = fmt.Sprintf(u, "gondportal", url.QueryEscape(p.nam), hmd5, p.ip, p.CheckSum(domain, challenge, hmd5, info), url.QueryEscape(info), time.Now().UnixMilli())
+	// 1.PortalServerIP 2. callback 3.username 4.PortalDomain 
+	// 5.encoded password 
+	// 6.ac_id: determined by login type
+	// 7.client IP
+	// 8.checksum
+	// 9.info
+	// 10.timestamp
+	u := GetLoginURL(sIP, "gondportal", url.QueryEscape(p.nam), domain, hmd5, ac_id, p.ip, p.CheckSum(domain, challenge, hmd5, ac_id, info), url.QueryEscape(info), time.Now().UnixMilli())
+	// u = fmt.Sprintf(u, "gondportal", url.QueryEscape(p.nam), hmd5, p.ip, p.CheckSum(domain, challenge, hmd5, info), url.QueryEscape(info), time.Now().UnixMilli())
 	logrus.Debugln("GET", u)
 	data, err := requestDataWith(u, "GET", PortalHeaderUA)
 	if err != nil {
diff --git a/portal/server.go b/portal/server.go
index 63bb814..8bc526b 100644
--- a/portal/server.go
+++ b/portal/server.go
@@ -4,30 +4,113 @@ import (
 	"crypto/sha1"
 	"encoding/binary"
 	"encoding/hex"
+	"fmt"
+	"net"
 
 	"github.com/fumiama/go-nd-portal/base64"
 	"github.com/fumiama/go-nd-portal/helper"
 )
 
 const (
+	// Default PortalServerIP String
 	PortalServerIP       = "10.253.0.237"
+	PortalServerIPDorm   = "10.253.0.235"
 	PortalDomain         = "@dx-uestc"
 	PortalDomainDX       = "@dx"
-	PortalGetChallenge   = "http://" + PortalServerIP + "/cgi-bin/get_challenge?callback=%s&username=%s" + PortalDomain + "&ip=%v&_=%d"
-	PortalGetChallengeDX = "http://" + PortalServerIP + "/cgi-bin/get_challenge?callback=%s&username=%s" + PortalDomainDX + "&ip=%v&_=%d"
-	PortalLogin          = "http://" + PortalServerIP + "/cgi-bin/srun_portal?callback=%s&action=login&username=%s" + PortalDomain + "&password={MD5}%s&ac_id=1&ip=%v&chksum=%s&info={SRBX1}%s&n=200&type=1&os=Windows+10&name=Windows&double_stack=0&_=%d"
-	PortalLoginDX        = "http://" + PortalServerIP + "/cgi-bin/srun_portal?callback=%s&action=login&username=%s" + PortalDomainDX + "&password={MD5}%s&ac_id=1&ip=%v&chksum=%s&info={SRBX1}%s&n=200&type=1&os=Windows+10&name=Windows&double_stack=0&_=%d"
+	PortalDomainCMCC     = "@cmcc"
+
+	// 1.server IP 
+	// 2.callback 
+	// 3.username 4.PortalDomain 
+	// 5.client IP
+	// 6.timestamp
+	PortalGetChallenge   = "http://%v/cgi-bin/get_challenge?callback=%s&username=%s%s&ip=%v&_=%d"
+	// PortalGetChallengeDX = "http://" + PortalServerIP + "/cgi-bin/get_challenge?callback=%s&username=%s" + PortalDomainDX + "&ip=%v&_=%d"
+	
+	// ac_id for different area
+	AC_ID         		 = "1"
+	AC_ID_DORM			 = "3"
+	// qsh LoginURL key-value order
+	// 1.server IP 
+	// 2.callback 
+	// 3.username 4.PortalDomain 
+	// 5.encoded password
+	// 6.ac_id: determined by login area
+	// 7.client IP
+	// 8.checksum
+	// 9.info
+	// 10.timestamp
+	PortalLogin          = "http://%v/cgi-bin/srun_portal?callback=%s&action=login&username=%s%s&password={MD5}%s&ac_id=%s&ip=%v&chksum=%s&info={SRBX1}%s&n=200&type=1&os=Windows+10&name=Windows&double_stack=0&_=%d"
+	// PortalLoginDX        = "http://" + PortalServerIP + "/cgi-bin/srun_portal?callback=%s&action=login&username=%s" + PortalDomainDX + "&password={MD5}%s&ac_id=1&ip=%v&chksum=%s&info={SRBX1}%s&n=200&type=1&os=Windows+10&name=Windows&double_stack=0&_=%d"
 )
 
+// GetChallengeURL generates the URL for getchallenge req
+func GetChallengeURL(sIP,
+	callback, username, domain string,
+	cIP net.IP, timestamp int64) string {
+	// 1.server IP 
+	// 2.callback 
+	// 3.username 4.PortalDomain
+	// 5.client IP
+	// 6.timestamp
+	return fmt.Sprintf(PortalGetChallenge, 
+		sIP, 
+		callback, 
+		username, domain, 
+		cIP, 
+		timestamp)
+}
+
+// LoginURL generates the URL for login req
+func GetLoginURL(sIP,
+	callback, 
+	username, domain, 
+	md5Password,
+	ac_id string,
+	cIP net.IP,
+	chksum,
+	info string, 
+	timestamp int64) string {
+	// 1.server IP 
+	// 2.callback 
+	// 3.username 4.PortalDomain 
+	// 5.encoded password 
+	// 6.ac_id: determined by login area
+	// 7.client IP
+	// 8.checksum
+	// 9.info
+	// 10.timestamp
+	return fmt.Sprintf(PortalLogin,
+		sIP, 
+		callback, 
+		username, domain,
+		md5Password,
+		ac_id,
+		cIP, 
+		chksum, 
+		info, 
+		timestamp)
+}
+
 const (
 	PortalHeaderUA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.56"
 )
 
 const (
-	PortalUserInfo   = `{"username":"%s` + PortalDomain + `","password":"%s","ip":"%v","acid":"1","enc_ver":"srun_bx1"}`
-	PortalUserInfoDX = `{"username":"%s` + PortalDomainDX + `","password":"%s","ip":"%v","acid":"1","enc_ver":"srun_bx1"}`
+	// 1.username 2.PortalDomain 3.password 4.client IP 5. ac_id
+	PortalUserInfo   = `{"username":"%s%s","password":"%s","ip":"%v","acid":"%s","enc_ver":"srun_bx1"}`
+	// PortalUserInfoDX = `{"username":"%s` + PortalDomainDX + `","password":"%s","ip":"%v","acid":"1","enc_ver":"srun_bx1"}`
 )
 
+// GetPortalUserInfo generates the UserInfo JSON for EncodeUserInfo
+func GetPortalUserInfo(username, pdomain, password string,
+	cIP net.IP,
+	ac_id string) string{
+	// 1. username 2.PortalDomain 3.password 4. client IP 5. ac_id
+	return fmt.Sprintf(PortalUserInfo,
+		username, pdomain, password, cIP, ac_id)
+}
+
 func EncodeUserInfo(info, challenge string) string {
 	if len(info) == 0 || len(challenge) == 0 || len(challenge)%4 != 0 {
 		return ""
@@ -80,7 +163,7 @@ func EncodeUserInfo(info, challenge string) string {
 	return base64.Base64Encoding.EncodeToString(lv)
 }
 
-func (p *Portal) CheckSum(domain, challenge, hmd5, info string) string {
+func (p *Portal) CheckSum(domain, challenge, hmd5, ac_id, info string) string {
 	var buf [20]byte
 	h := sha1.New()
 	_, _ = h.Write(helper.StringToBytes(challenge))
@@ -89,7 +172,7 @@ func (p *Portal) CheckSum(domain, challenge, hmd5, info string) string {
 	_, _ = h.Write(helper.StringToBytes(challenge))
 	_, _ = h.Write(helper.StringToBytes(hmd5))
 	_, _ = h.Write(helper.StringToBytes(challenge))
-	_, _ = h.Write([]byte("1")) // ac_id
+	_, _ = h.Write([]byte(ac_id)) // ac_id
 	_, _ = h.Write(helper.StringToBytes(challenge))
 	_, _ = h.Write(helper.StringToBytes(p.ip.String()))
 	_, _ = h.Write(helper.StringToBytes(challenge))
