<%+header%>


<style>
/* Default (light mode) styles */
body {
    background-color: #f0f0f0;
    color: #333;
}

/* Other styles remain the same as in the previous code */

/* Dark mode styles */
@media (prefers-color-scheme: dark) {
    /* Dark mode styles remain the same as in the previous code */
}
</style>

<h2><%:UESTC Authentication%></h2>

<div class="cbi-map-descr">
    <%:This page displays the current status of the UESTC authentication client and provides control functions.%>
</div>

<!-- Status section (initially shows 'Loading...' placeholders) -->
<div class="status-card" id="status_card">
    <h3><%:Status%></h3>
    <div id="status_container">
        <div class="status-item">
            <div class="status-label"><%:Network Status%></div>
            <div class="status-value" id="network_status"><span><%:Updating...%></span></div>
        </div>
        <div class="status-item">
            <div class="status-label"><%:Last Login Time%></div>
            <div class="status-value" id="last_login"><span><%:Updating...%></span></div>
        </div>
        <div class="status-item">
            <div class="status-label"><%:Service Status%></div>
            <div class="status-value" id="service_status"><span><%:Updating...%></span></div>
        </div>
    </div>
    <div id="status_loading" class="loading-overlay hidden">
        <div class="spinner" aria-hidden="true"></div> 
        <span><%:Updating...%></span>
    </div>
</div>

<!-- Control section with start/stop actions -->
<div class="status-card">
    <h3><%:Control%></h3>
    <div class="control-buttons">
        <button id="btn_start" class="cbi-button cbi-button-success" onclick="handleAction('start')" disabled><%:Start%></button>
        <button id="btn_stop" class="cbi-button cbi-button-danger" onclick="handleAction('stop')" disabled><%:Stop%></button>
    </div>
</div>

<!-- Log display section -->
<div class="status-card" id="log_card">
    <h3><%:Logs%></h3>
    <textarea id="log_content" readonly="readonly" wrap="off" class="cbi-input-textarea" style="width:100%; height:300px; font-family: monospace; font-size: 12px;"></textarea>
    <div class="log-actions">
        <button id="clear_log_button" class="cbi-button cbi-button-negative" onclick="handleAction('clear_log')"><%:Clear Logs%></button>
    </div>
    <div id="log_loading" class="loading-overlay hidden">
        <div class="spinner" aria-hidden="true"></div> 
        <span><%:Updating logs...%></span>
    </div>
</div>

<script type="text/javascript">
    // Global variables for controlling update intervals and concurrency
    var isUpdating = false;
    var updateQueue = false;
    var logUpdatePending = false;
    var lastLogUpdate = 0;
    var lastStatusUpdate = 0;
    
    // Show loading indicator by removing 'hidden' class
    function showLoading(element) {
        document.getElementById(element).classList.remove('hidden');
    }
    
    // Hide loading indicator by adding 'hidden' class
    function hideLoading(element) {
        document.getElementById(element).classList.add('hidden');
    }
    
    // Handle start, stop, and clear_log actions via AJAX
    function handleAction(action) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/uestc_authclient/" + action) %>', true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    updateStatus(true);
                    if (action === 'clear_log') {
                        refreshLog(true); // Refresh logs after clearing
                    }
                } else {
                    alert('Error executing action: ' + action);
                }
            }
        };
        xhr.send(null);
    }


    // Ajax function to refresh logs
    function refreshLog(showLoadingIndicator) {
        var now = Date.now();
        if (showLoadingIndicator) {
            showLoading('log_loading');
        }
        
        // Prevent concurrent log updates
        if (logUpdatePending) {
            return;
        }
        
        // Set flag to indicate update in progress
        logUpdatePending = true;
        lastLogUpdate = now;
        
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/uestc_authclient/get_log")%>?_t=' + now, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                logUpdatePending = false;
                hideLoading('log_loading');
                
                if (xhr.status === 200) {
                    var logContent = document.getElementById('log_content');
                    var isAtBottom = (logContent.scrollTop + logContent.clientHeight) >= (logContent.scrollHeight - 5);
                    logContent.value = xhr.responseText;
                    if (isAtBottom) {
                        logContent.scrollTop = logContent.scrollHeight;
                    }
                }
            }
        };
        xhr.send(null);
    }

    // Ajax function to update status
    function updateStatus(showLoadingIndicator) {
        // Prevent concurrent status updates
        if (isUpdating) {
            updateQueue = true;
            return;
        }
        
        var now = Date.now();
        if (showLoadingIndicator) {
            showLoading('status_loading');
        }
        
        isUpdating = true;
        lastStatusUpdate = now;
        
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/uestc_authclient/status")%>?_t=' + now, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                isUpdating = false;
                hideLoading('status_loading');
                
                // Check if another update is queued
                if (updateQueue) {
                    updateQueue = false;
                    setTimeout(function() {
                        updateStatus(true);
                    }, 100);
                }
                
                if (xhr.status === 200) {
                    try {
                        var response = JSON.parse(xhr.responseText);
                        
                        // Update "Network Status" display
                        var networkStatusEl = document.getElementById('network_status');
                        if (networkStatusEl) {
                            if (response.network_status === "connected") {
                                networkStatusEl.innerHTML = '<span style="color: green;"><strong><%:Connected%></strong></span>';
                            } else if (response.network_status === "disconnected") {
                                networkStatusEl.innerHTML = '<span style="color: red;"><strong><%:Disconnected%></strong></span>';
                            } else {
                                networkStatusEl.innerHTML = '<span><strong><%:Not running%></strong></span>';
                            }
                        }
                        
                        // Update "Service Status" display and button states
                        var serviceStatusEl = document.getElementById('service_status');
                        var btnStart = document.getElementById('btn_start');
                        var btnStop = document.getElementById('btn_stop');
                        
                        if (serviceStatusEl && btnStart && btnStop) {
                            if (response.running) {
                                serviceStatusEl.innerHTML = '<span style="color: green;"><strong><%:Running%></strong></span>';
                                btnStart.disabled = true;
                                btnStop.disabled = false;
                            } else {
                                serviceStatusEl.innerHTML = '<span style="color: red;"><strong><%:Not running%></strong></span>';
                                btnStart.disabled = false;
                                btnStop.disabled = true;
                            }
                        }
                        
                        // Update "Last Login Time"
                        var lastLoginEl = document.getElementById('last_login');
                        if (lastLoginEl && response.last_login) {
                            lastLoginEl.textContent = response.last_login;
                        }
                    } catch (e) {
                        console.error('Error parsing status:', e);
                    }
                }
            }
        };
        xhr.send(null);
    }

    // Initialize page on load
    document.addEventListener('DOMContentLoaded', function() {
        // Load logs initially
        refreshLog(true);
        // Get Status initially
        updateStatus(true);
    });
</script>

<%+footer%>
