<%+header%>

<%
-- Import necessary modules for form handling
local sys  = require "luci.sys"
local fs   = require "nixio.fs"
local http = require "luci.http"

-- Flag for detecting if an action was performed
local just_performed_action = false
local action = http.formvalue("action")

-- Handle form submissions for start/stop/clear_log
if action == "start" then
    sys.call("/etc/init.d/uestc_authclient start")
    just_performed_action = true
elseif action == "stop" then
    sys.call("/etc/init.d/uestc_authclient stop")
    just_performed_action = true
elseif action == "clear_log" then
    fs.writefile("/tmp/uestc_authclient.log", "")
    just_performed_action = true
end
%>

<style>
/* Default (light mode) styles */
body {
    background-color: #f0f0f0;
    color: #333;
}

.status-card {
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-bottom: 20px;
    position: relative;
}

.status-card h3 {
    margin-top: 0;
    border-bottom: 1px solid #e6e6e6;
    padding-bottom: 10px;
    margin-bottom: 15px;
}

.status-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.status-label {
    font-weight: bold;
}

.status-value {
    text-align: right;
}

.control-buttons {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 10px;
}

.control-buttons button {
    min-width: 120px;
}

.log-container {
    margin-top: 20px;
}

.log-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 10px;
}

.alert-message {
    padding: 10px 15px;
    margin-bottom: 15px;
    border-radius: 4px;
    font-weight: bold;
}

.cbi-button-danger {
    background-color: #d9534f !important;
    color: white !important;
    border-color: #d43f3a !important;
}

.cbi-button-success {
    background-color: #5cb85c !important;
    color: white !important;
    border-color: #4cae4c !important;
}

.spinner {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-left-color: #09f;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-right: 5px;
    vertical-align: middle;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

.hidden {
    display: none;
}

.loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

@media (max-width: 768px) {
    .status-item {
        flex-direction: column;
        align-items: flex-start;
    }
    .status-value {
        text-align: left;
        margin-top: 5px;
    }
}

/* Dark mode styles */
@media (prefers-color-scheme: dark) {
    body {
        background-color: #181818;
        color: #f0f0f0;
    }

    .status-card {
        background-color: #2c2c2c;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
    }

    .status-card h3 {
        color: #f0f0f0;
        border-bottom: 1px solid #444;
    }

    .status-label {
        color: #f0f0f0;
    }

    .status-value {
        color: #dcdcdc;
    }

    .control-buttons button {
        background-color: #3e8e41;
        border: 1px solid #5cb85c;
    }

    .cbi-button-danger {
        background-color: #c9302c;
        border-color: #ac2925;
    }

    .cbi-button-success {
        background-color: #4cae4c;
        border-color: #398439;
    }

    .spinner {
        border-left-color: #4b8f29;
    }

    .log-actions button {
        background-color: #d9534f;
    }

    .alert-message {
        background-color: #4cae4c;
        border: 1px solid #398439;
        color: #ffffff;
    }
}
</style>

<h2><%:UESTC Authentication%></h2>

<div class="cbi-map-descr">
    <%:This page displays the current status of the UESTC authentication client and provides control functions.%>
</div>

<!-- Status section (initially shows 'Loading...' placeholders) -->
<div class="status-card" id="status_card">
    <h3><%:Status%></h3>
    <div id="status_container">
        <div class="status-item">
            <div class="status-label"><%:Network Status%></div>
            <div class="status-value" id="network_status"><span><%:Updating...%></span></div>
        </div>
        <div class="status-item">
            <div class="status-label"><%:Last Login Time%></div>
            <div class="status-value" id="last_login"><span><%:Updating...%></span></div>
        </div>
        <div class="status-item">
            <div class="status-label"><%:Service Status%></div>
            <div class="status-value" id="service_status"><span><%:Updating...%></span></div>
        </div>
    </div>
    <div id="status_loading" class="loading-overlay hidden">
        <div class="spinner" aria-hidden="true"></div> 
        <span><%:Updating...%></span>
    </div>
</div>

<!-- Control section with start/stop actions always disabled initially -->
<div class="status-card">
    <h3><%:Control%></h3>
    <form id="control_form" method="post" action="<%=luci.dispatcher.build_url("admin/services/uestc_authclient")%>">
        <div class="control-buttons">
            <button type="submit" name="action" value="start" class="cbi-button cbi-button-success" id="btn_start" disabled="true"><%:Start%></button>
            <button type="submit" name="action" value="stop" class="cbi-button cbi-button-danger" id="btn_stop" disabled="true"><%:Stop%></button>
        </div>
    </form>
</div>

<!-- Log display section -->
<div class="status-card" id="log_card">
    <h3><%:Logs%></h3>
    <form id="log_form" method="post" action="<%=luci.dispatcher.build_url("admin/services/uestc_authclient")%>">
        <textarea id="log_content" readonly="readonly" wrap="off" class="cbi-input-textarea" style="width:100%; height:300px; font-family: monospace; font-size: 12px;"></textarea>
        <div class="log-actions">
            <button type="submit" name="action" value="clear_log" class="cbi-button cbi-button-negative"><%:Clear Logs%></button>
        </div>
    </form>
    <div id="log_loading" class="loading-overlay hidden">
        <div class="spinner" aria-hidden="true"></div> 
        <span><%:Updating logs...%></span>
    </div>
</div>

<!-- If an action was just performed, we set a flag to trigger immediate update on page load -->
<% if just_performed_action then %>
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('status_loading').classList.remove('hidden');
        window.actionJustPerformed = true;
    });
</script>
<% end %>

<script type="text/javascript">
    // Global variables for controlling update intervals and concurrency
    var isUpdating = false;
    var updateQueue = false;
    var logUpdatePending = false;
    var lastLogUpdate = 0;
    var lastStatusUpdate = 0;
    
    // Show loading indicator by removing 'hidden' class
    function showLoading(element) {
        document.getElementById(element).classList.remove('hidden');
    }
    
    // Hide loading indicator by adding 'hidden' class
    function hideLoading(element) {
        document.getElementById(element).classList.add('hidden');
    }
    
    // Ajax function to refresh logs
    function refreshLog(showLoadingIndicator) {
        var now = Date.now();
        if (showLoadingIndicator) {
            showLoading('log_loading');
        }
        
        // Prevent concurrent log updates
        if (logUpdatePending) {
            return;
        }
        
        // Set flag to indicate update in progress
        logUpdatePending = true;
        lastLogUpdate = now;
        
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/uestc_authclient/get_log")%>?_t=' + now, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                logUpdatePending = false;
                hideLoading('log_loading');
                
                if (xhr.status === 200) {
                    var logContent = document.getElementById('log_content');
                    var isAtBottom = (logContent.scrollTop + logContent.clientHeight) >= (logContent.scrollHeight - 5);
                    logContent.value = xhr.responseText;
                    if (isAtBottom) {
                        logContent.scrollTop = logContent.scrollHeight;
                    }
                }
            }
        };
        xhr.send(null);
    }

    // Ajax function to update status
    function updateStatus(showLoadingIndicator) {
        // Prevent concurrent status updates
        if (isUpdating) {
            updateQueue = true;
            return;
        }
        
        var now = Date.now();
        if (showLoadingIndicator) {
            showLoading('status_loading');
        }
        
        isUpdating = true;
        lastStatusUpdate = now;
        
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/uestc_authclient/status")%>?_t=' + now, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                isUpdating = false;
                hideLoading('status_loading');
                
                // Check if another update is queued
                if (updateQueue) {
                    updateQueue = false;
                    setTimeout(function() {
                        updateStatus(true);
                    }, 100);
                }
                
                if (xhr.status === 200) {
                    try {
                        var response = JSON.parse(xhr.responseText);
                        
                        // Update "Network Status" display
                        var networkStatusEl = document.getElementById('network_status');
                        if (networkStatusEl) {
                            if (response.network_status === "connected") {
                                networkStatusEl.innerHTML = '<span style="color: green;"><strong><%:Connected%></strong></span>';
                            } else if (response.network_status === "disconnected") {
                                networkStatusEl.innerHTML = '<span style="color: red;"><strong><%:Disconnected%></strong></span>';
                            } else {
                                networkStatusEl.innerHTML = '<span><strong><%:Not running%></strong></span>';
                            }
                        }
                        
                        // Update "Service Status" display and button states
                        var serviceStatusEl = document.getElementById('service_status');
                        var btnStart = document.getElementById('btn_start');
                        var btnStop = document.getElementById('btn_stop');
                        
                        if (serviceStatusEl && btnStart && btnStop) {
                            if (response.running) {
                                serviceStatusEl.innerHTML = '<span style="color: green;"><strong><%:Running%></strong></span>';
                                btnStart.disabled = true;
                                btnStop.disabled = false;
                            } else {
                                serviceStatusEl.innerHTML = '<span style="color: red;"><strong><%:Not running%></strong></span>';
                                btnStart.disabled = false;
                                btnStop.disabled = true;
                            }
                        }
                        
                        // Update "Last Login Time"
                        var lastLoginEl = document.getElementById('last_login');
                        if (lastLoginEl && response.last_login) {
                            lastLoginEl.textContent = response.last_login;
                        }
                    } catch (e) {
                        console.error('Error parsing status:', e);
                    }
                }
            }
        };
        xhr.send(null);
    }

    // Form submission events for immediate feedback
    document.getElementById('control_form').addEventListener('submit', function(e) {
        var formData = new FormData(this);
        var actionValue = formData.get('action');
        
        // Instant feedback in UI
        if (actionValue === 'start') {
            var btnStart = document.getElementById('btn_start');
            var serviceStatusEl = document.getElementById('service_status');
            if (btnStart) btnStart.disabled = true;
            if (serviceStatusEl) serviceStatusEl.innerHTML = '<div class="spinner"></div> <span><%:Starting...%></span>';
        } else if (actionValue === 'stop') {
            var btnStop = document.getElementById('btn_stop');
            var serviceStatusEl = document.getElementById('service_status');
            if (btnStop) btnStop.disabled = true;
            if (serviceStatusEl) serviceStatusEl.innerHTML = '<div class="spinner"></div> <span><%:Stopping...%></span>';
        }
        
        // Schedule a status + log update after a short delay
        showLoading('status_loading');
        setTimeout(function() {
            updateStatus(true);
            refreshLog(false);
        }, 200);
    });

    document.getElementById('log_form').addEventListener('submit', function() {
        showLoading('log_loading');
        // Delay to let the system clear the log, then refresh
        setTimeout(function() {
            refreshLog(true);
        }, 200);
    });

    // Initialize page on load
    document.addEventListener('DOMContentLoaded', function() {
        // Load logs initially
        refreshLog(true);
        
        // If the page was just submitted with an action, do an immediate status update
        if (window.actionJustPerformed) {
            setTimeout(function() {
                updateStatus(true);
            }, 100);
        }
        
        // Automatic periodic status/ log refresh
        var statusInterval = setInterval(function() {
            // Only update if more than 3s since last status update
            if (Date.now() - lastStatusUpdate > 3000) {
                updateStatus(false);
            }
        }, 2500);
        
        var logInterval = setInterval(function() {
            // Only update if more than 2s since last log update
            if (Date.now() - lastLogUpdate > 2000) {
                refreshLog(false);
            }
        }, 2000);
    });
</script>

<%+footer%>
