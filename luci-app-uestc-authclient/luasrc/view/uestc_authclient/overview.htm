<%+header%>

<%
local sys = require "luci.sys"
local fs = require "nixio.fs"
local uci = require "luci.model.uci".cursor()
local http = require "luci.http"

-- Path to the service script
local PROG = "/usr/bin/uestc_authclient_monitor.sh"

-- Check if an action was just performed
local just_performed_action = false
local action = http.formvalue("action")

-- Handle form submissions
if action == "start" then
    sys.call("/etc/init.d/uestc_authclient start")
    just_performed_action = true
elseif action == "stop" then
    sys.call("/etc/init.d/uestc_authclient stop")
    just_performed_action = true
elseif action == "clear_log" then
    fs.writefile("/tmp/uestc_authclient.log", "")
    just_performed_action = true
end

-- Check if the service is running
local is_running = (sys.call("pgrep -f '" .. PROG .. "' >/dev/null") == 0)

-- Check network status
local network_status = translate("Not running")
if is_running then
    -- Get the list of heartbeat hosts
    local heartbeat_hosts = uci:get_list("uestc_authclient", "authclient", "heartbeat_hosts") or {"223.5.5.5", "119.29.29.29"}
    -- Check network connectivity
    network_status = translate("Disconnected")
    for _, host in ipairs(heartbeat_hosts) do
        if sys.call("ping -c 1 -W 1 " .. host .. " >/dev/null 2>&1") == 0 then
            network_status = translate("Connected")
            break
        end
    end
else
    network_status = translate("Not running")
end

local last_login = fs.readfile("/tmp/uestc_authclient_last_login") or translate("None")

-- Check for success message from config page
local success_msg = nil
if http.formvalue("success") == "1" then
    success_msg = translate("Configuration has been saved and the service has been restarted!")
end

%>

<style>
.status-card {
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-bottom: 20px;
}
.status-card h3 {
    margin-top: 0;
    border-bottom: 1px solid #e6e6e6;
    padding-bottom: 10px;
    margin-bottom: 15px;
}
.status-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}
.status-label {
    font-weight: bold;
}
.status-value {
    text-align: right;
}
.control-buttons {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 10px;
}
.control-buttons button {
    min-width: 120px;
}
.log-container {
    margin-top: 20px;
}
.log-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 10px;
}
.alert-message {
    padding: 10px 15px;
    margin-bottom: 15px;
    border-radius: 4px;
    font-weight: bold;
}
.alert-success {
    background-color: #dff0d8;
    border: 1px solid #d6e9c6;
    color: #3c763d;
}
.cbi-button-danger {
    background-color: #d9534f !important;
    color: white !important;
    border-color: #d43f3a !important;
}
.cbi-button-success {
    background-color: #5cb85c !important;
    color: white !important;
    border-color: #4cae4c !important;
}
.spinner {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-left-color: #09f;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-right: 5px;
    vertical-align: middle;
}
@keyframes spin {
    to { transform: rotate(360deg); }
}
.hidden {
    display: none;
}
.loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}
.relative {
    position: relative;
}
@media (max-width: 768px) {
    .status-item {
        flex-direction: column;
        align-items: flex-start;
    }
    .status-value {
        text-align: left;
        margin-top: 5px;
    }
}
</style>

<h2><%:UESTC Authentication%></h2>

<div class="cbi-map-descr">
    <%:This page displays the current status of the UESTC authentication client and provides control functions.%>
</div>

<% if success_msg then %>
<div class="alert-message alert-success">
    <%= success_msg %>
</div>
<% end %>

<!-- Status section -->
<div class="status-card relative" id="status_card">
    <h3><%:Status%></h3>
    <div id="status_container">
        <div class="status-item">
            <div class="status-label"><%:Network Status%></div>
            <div class="status-value" id="network_status">
                <% if network_status == translate("Connected") then %>
                    <span style="color: green;"><strong><%=network_status%></strong></span>
                <% elseif network_status == translate("Disconnected") then %>
                    <span style="color: red;"><strong><%=network_status%></strong></span>
                <% else %>
                    <span><strong><%=network_status%></strong></span>
                <% end %>
            </div>
        </div>
        <div class="status-item">
            <div class="status-label"><%:Last Login Time%></div>
            <div class="status-value" id="last_login"><%=last_login%></div>
        </div>
        <div class="status-item">
            <div class="status-label"><%:Service Status%></div>
            <div class="status-value" id="service_status">
                <% if is_running then %>
                    <span style="color: green;"><strong><%:Running%></strong></span>
                <% else %>
                    <span style="color: red;"><strong><%:Not running%></strong></span>
                <% end %>
            </div>
        </div>
    </div>
    <div id="status_loading" class="loading-overlay hidden">
        <div class="spinner"></div> <%:Updating...%>
    </div>
</div>

<!-- Control section -->
<div class="status-card">
    <h3><%:Control%></h3>
    <form id="control_form" method="post" action="<%=luci.dispatcher.build_url("admin/services/uestc_authclient")%>">
        <div class="control-buttons">
            <button type="submit" name="action" value="start" class="cbi-button cbi-button-success" id="btn_start" <% if is_running then %>disabled<% end %>><%:Start%></button>
            <button type="submit" name="action" value="stop" class="cbi-button cbi-button-danger" id="btn_stop" <% if not is_running then %>disabled<% end %>><%:Stop%></button>
        </div>
    </form>
</div>

<!-- Log display section -->
<div class="status-card relative" id="log_card">
    <h3><%:Logs%></h3>
    <form id="log_form" method="post" action="<%=luci.dispatcher.build_url("admin/services/uestc_authclient")%>">
        <textarea id="log_content" readonly="readonly" wrap="off" class="cbi-input-textarea" style="width:100%; height:300px; font-family: monospace; font-size: 12px;"></textarea>
        <div class="log-actions">
            <span id="log_status"></span>
            <button type="submit" name="action" value="clear_log" class="cbi-button cbi-button-negative"><%:Clear Logs%></button>
        </div>
    </form>
    <div id="log_loading" class="loading-overlay hidden">
        <div class="spinner"></div> <%:Updating logs...%>
    </div>
</div>

<!-- Init script for status and immediate action -->
<% if just_performed_action then %>
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function() {
        // If an action was just performed, update immediately
        document.getElementById('status_loading').classList.remove('hidden');
        
        // We'll trigger the update in the main script
        window.actionJustPerformed = true;
    });
</script>
<% end %>

<script type="text/javascript">
    // Global variables
    var isUpdating = false;
    var updateQueue = false;
    var logUpdatePending = false;
    var lastLogUpdate = 0;
    var lastStatusUpdate = 0;
    
    // Show loading indicator
    function showLoading(element) {
        document.getElementById(element).classList.remove('hidden');
    }
    
    // Hide loading indicator
    function hideLoading(element) {
        document.getElementById(element).classList.add('hidden');
    }
    
    // Function to refresh logs
    function refreshLog(showLoadingIndicator) {
        var now = Date.now();
        if (showLoadingIndicator) {
            showLoading('log_loading');
        }
        
        // Prevent concurrent updates
        if (logUpdatePending) {
            return;
        }
        
        // Set flag to indicate update in progress
        logUpdatePending = true;
        lastLogUpdate = now;
        
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/uestc_authclient/get_log")%>?_t=' + now, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState == XMLHttpRequest.DONE) {
                logUpdatePending = false;
                hideLoading('log_loading');
                
                if (xhr.status == 200) {
                    var logContent = document.getElementById('log_content');
                    var isAtBottom = (logContent.scrollTop + logContent.clientHeight) >= (logContent.scrollHeight - 5);
                    logContent.value = xhr.responseText;
                    if (isAtBottom) {
                        logContent.scrollTop = logContent.scrollHeight;
                    }
                    
                    // Update timestamp
                    document.getElementById('log_status').textContent = "<%:Last updated:%> " + new Date().toLocaleTimeString();
                }
            }
        };
        xhr.send(null);
    }

    // Function to update status
    function updateStatus(showLoadingIndicator) {
        // Prevent concurrent updates
        if (isUpdating) {
            updateQueue = true;
            return;
        }
        
        var now = Date.now();
        if (showLoadingIndicator) {
            showLoading('status_loading');
        }
        
        isUpdating = true;
        lastStatusUpdate = now;
        
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/uestc_authclient/status")%>?_t=' + now, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState == XMLHttpRequest.DONE) {
                isUpdating = false;
                hideLoading('status_loading');
                
                // Check if another update is queued
                if (updateQueue) {
                    updateQueue = false;
                    setTimeout(function() { updateStatus(true); }, 100);
                }
                
                if (xhr.status == 200) {
                    try {
                        var response = JSON.parse(xhr.responseText);
                        
                        // Update network status
                        var networkStatusEl = document.getElementById('network_status');
                        if (response.network_status === "connected") {
                            networkStatusEl.innerHTML = '<span style="color: green;"><strong><%:Connected%></strong></span>';
                        } else if (response.network_status === "disconnected") {
                            networkStatusEl.innerHTML = '<span style="color: red;"><strong><%:Disconnected%></strong></span>';
                        } else {
                            networkStatusEl.innerHTML = '<span><strong><%:Not running%></strong></span>';
                        }
                        
                        // Update service status
                        var serviceStatusEl = document.getElementById('service_status');
                        if (response.running) {
                            serviceStatusEl.innerHTML = '<span style="color: green;"><strong><%:Running%></strong></span>';
                            document.getElementById('btn_start').disabled = true;
                            document.getElementById('btn_stop').disabled = false;
                        } else {
                            serviceStatusEl.innerHTML = '<span style="color: red;"><strong><%:Not running%></strong></span>';
                            document.getElementById('btn_start').disabled = false;
                            document.getElementById('btn_stop').disabled = true;
                        }
                        
                        // Update last login
                        document.getElementById('last_login').textContent = response.last_login;
                    } catch (e) {
                        console.error('Error parsing status:', e);
                    }
                }
            }
        };
        xhr.send(null);
    }

    // Optimized form submission with immediate visual feedback
    document.getElementById('control_form').addEventListener('submit', function(e) {
        var formData = new FormData(this);
        var actionValue = formData.get('action');
        
        // Immediate UI changes for better responsiveness
        if (actionValue === 'start') {
            document.getElementById('btn_start').disabled = true;
            document.getElementById('service_status').innerHTML = '<div class="spinner"></div> <span><%:Starting...%></span>';
        } else if (actionValue === 'stop') {
            document.getElementById('btn_stop').disabled = true;
            document.getElementById('service_status').innerHTML = '<div class="spinner"></div> <span><%:Stopping...%></span>';
        }
        
        // Update status after a short delay
        showLoading('status_loading');
        setTimeout(function() { 
            updateStatus(true); 
            refreshLog(false);
        }, 200);
    });

    document.getElementById('log_form').addEventListener('submit', function() {
        showLoading('log_loading');
        // Update logs after a short delay
        setTimeout(function() { refreshLog(true); }, 200);
    });

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Initial log load
        refreshLog(true);
        
        // Check if an action was just performed from previous script
        if (window.actionJustPerformed) {
            setTimeout(function() { updateStatus(true); }, 100);
        }
        
        // Auto refresh status and logs with optimized intervals
        var statusInterval = setInterval(function() {
            // Only auto-update if it's been more than 3 seconds since last update
            if (Date.now() - lastStatusUpdate > 3000) {
                updateStatus(false);
            }
        }, 2500);
        
        var logInterval = setInterval(function() {
            // Only auto-update if it's been more than 2 seconds since last update
            if (Date.now() - lastLogUpdate > 2000) {
                refreshLog(false);
            }
        }, 2000);
        
        // Auto hide success message after 5 seconds
        var successAlert = document.querySelector('.alert-success');
        if (successAlert) {
            setTimeout(function() {
                successAlert.style.display = 'none';
            }, 5000);
        }
    });
</script>

<%+footer%>
