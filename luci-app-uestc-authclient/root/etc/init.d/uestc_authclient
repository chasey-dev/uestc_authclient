#!/bin/sh /etc/rc.common

START=99
STOP=10

USE_PROCD=1

# Source the shared logging utility functions
. /usr/lib/uestc_authclient/log_utils.sh

# Get the system language
LANG=$(uci get luci.main.lang 2>/dev/null)
[ -z "$LANG" ] && LANG="en"

# Define messages based on the language
if [ "$LANG" = "zh_cn" ]; then
    MSG_DISABLED="UESTC 认证客户端在配置中被禁用，不启动服务。"
    MSG_UNKNOWN_CLIENT_TYPE="未知的客户端类型："
    MSG_USERNAME_PASSWORD_NOT_SET="用户名或密码未设置，服务无法启动。"
    MSG_SERVICE_STARTED="服务已启动。"
    MSG_SERVICE_STOPPED="服务已停止。"
else
    MSG_DISABLED="UESTC authentication client is disabled in the configuration, not starting service."
    MSG_UNKNOWN_CLIENT_TYPE="Unknown client type:"
    MSG_USERNAME_PASSWORD_NOT_SET="Username or password not set, service cannot start."
    MSG_SERVICE_STARTED="Service started."
    MSG_SERVICE_STOPPED="Service stopped."
fi

# Initialize logging
log_init "/tmp/uestc_authclient.log"

boot() {
    enabled=$(uci get uestc_authclient.@authclient[0].enabled 2>/dev/null)
    if [ "$enabled" = "1" ]; then
        start
    else
        log_message "$MSG_DISABLED"
    fi
}

start_service() {
    sleep 2

    PROG="/usr/bin/uestc_authclient_monitor.sh"

    CLIENT_TYPE=$(uci get uestc_authclient.@authclient[0].client_type 2>/dev/null)
    [ -z "$CLIENT_TYPE" ] && CLIENT_TYPE="ct"

    if [ "$CLIENT_TYPE" = "ct" ]; then
        USERNAME=$(uci get uestc_authclient.@authclient[0].ct_client_username 2>/dev/null)
        PASSWORD=$(uci get uestc_authclient.@authclient[0].ct_client_password 2>/dev/null)
    elif [ "$CLIENT_TYPE" = "srun" ]; then
        USERNAME=$(uci get uestc_authclient.@authclient[0].srun_client_username 2>/dev/null)
        PASSWORD=$(uci get uestc_authclient.@authclient[0].srun_client_password 2>/dev/null)
    else
        log_printf "$MSG_UNKNOWN_CLIENT_TYPE %s" "$CLIENT_TYPE"
        return 1
    fi

    if [ -z "$USERNAME" ] || [ -z "$PASSWORD" ]; then
        log_message "$MSG_USERNAME_PASSWORD_NOT_SET"
        return 1
    fi

    log_message "$MSG_SERVICE_STARTED"

    procd_open_instance
    procd_set_param command $PROG
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_close_instance
}

stop_service() {
    log_message "$MSG_SERVICE_STOPPED"
    # procd will automatically handle stopping the process
}
